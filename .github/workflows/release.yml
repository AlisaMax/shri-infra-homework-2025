name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test

      - name: Create release branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

      - name: Get commits since last release
        id: get-commits
        run: |
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # If no tags exist, get all commits
            COMMITS=$(git log --oneline --no-merges | head -20)
          else
            # Get commits since last tag
            COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Install Yandex CLI and configure docker auth
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH="$PATH:$HOME/yandex-cloud/bin"
          if [ -f "$HOME/yandex-cloud/bin/docker-credential-yc" ]; then
            sudo cp "$HOME/yandex-cloud/bin/docker-credential-yc" /usr/local/bin/
          fi
          if [ -f "$HOME/yandex-cloud/bin/yc" ]; then
            sudo cp "$HOME/yandex-cloud/bin/yc" /usr/local/bin/
          fi
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY_JSON }}' > key.json
          yc config set service-account-key key.json
          yc config set cloud-id b1g5bv1glb6q0iu7ujil
          yc config set folder-id b1gmgijkm3ugaq00n1le
          yc container registry configure-docker
          rm key.json

      - name: Build Docker image
        run: |
          docker build -t cr.yandex/crp3t6gvtieggu7lip3q/app:${{ github.run_number }} .
          docker tag cr.yandex/crp3t6gvtieggu7lip3q/app:${{ github.run_number }} cr.yandex/crp3t6gvtieggu7lip3q/app:${{ github.run_number }}_latest

      - name: Push Docker image
        run: |
          docker push cr.yandex/crp3t6gvtieggu7lip3q/app:${{ github.run_number }}
          docker push cr.yandex/crp3t6gvtieggu7lip3q/app:${{ github.run_number }}_latest

      - name: Create release tag
        run: |
          git tag ${{ github.run_number }}
          git push origin ${{ github.run_number }}

      - name: Update CHANGELOG.md
        run: |
          # Create changelog entry
          echo "# Version ${{ github.run_number }}" > temp_changelog.md
          echo "" >> temp_changelog.md
          echo "## Commits" >> temp_changelog.md
          echo "" >> temp_changelog.md
          echo '${{ steps.get-commits.outputs.commits }}' >> temp_changelog.md
          echo "" >> temp_changelog.md
          echo "---" >> temp_changelog.md
          echo "" >> temp_changelog.md

          # Prepend to existing CHANGELOG.md
          if [ -f "CHANGELOG.md" ]; then
            cat temp_changelog.md CHANGELOG.md > temp_full_changelog.md
            mv temp_full_changelog.md CHANGELOG.md
          else
            mv temp_changelog.md CHANGELOG.md
          fi

          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for version ${{ github.run_number }}"
          git push origin releases/${{ github.run_number }}

      - name: Create Pull Request to main
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update CHANGELOG.md for version ${{ github.run_number }}"
          title: "Release ${{ github.run_number }} â€“ update CHANGELOG.md"
          body: "Automated PR to update CHANGELOG.md with commits from release."
          base: main
          branch: releases/${{ github.run_number }}

      - name: Enable auto-merge for Pull Request
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash

      - name: Create release issue
        uses: actions/github-script@v7
        with:
          script: |
            const commits = `${{ steps.get-commits.outputs.commits }}`;
            const lastTag = '${{ steps.get-commits.outputs.last_tag }}';

            let commitsText = '';
            if (lastTag) {
              commitsText = `Commits since ${lastTag}:\n\`\`\`\n${commits}\n\`\`\``;
            } else {
              commitsText = `All commits (first release):\n\`\`\`\n${commits}\n\`\`\``;
            }

            const body = '## Release Information\n\n' +
              '**Date:** ' + new Date().toISOString() + '\n' +
              '**Author:** ${{ github.actor }}\n' +
              '**Version:** ${{ github.run_number }}\n\n' +
              '## Docker Image\n' +
              '`cr.yandex/crp3t6gvtieggu7lip3q/app:${{ github.run_number }}`\n\n' +
              '## Changes\n' +
              commitsText + '\n\n' +
              '## Release Branch\n' +
              '`releases/${{ github.run_number }}`';

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${{ github.run_number }}`,
              body: body
            });
